// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: assets.proto

package protobuffer

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PBAssetType int32

const (
	PBAssetType_wallet PBAssetType = 0
	PBAssetType_Group  PBAssetType = 1
	PBAssetType_iddoc  PBAssetType = 2
)

var PBAssetType_name = map[int32]string{
	0: "wallet",
	1: "Group",
	2: "iddoc",
}

var PBAssetType_value = map[string]int32{
	"wallet": 0,
	"Group":  1,
	"iddoc":  2,
}

func (x PBAssetType) String() string {
	return proto.EnumName(PBAssetType_name, int32(x))
}

func (PBAssetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_610ca40ce07a87fe, []int{0}
}

type PBTransferType int32

const (
	PBTransferType_unspecified     PBTransferType = 0
	PBTransferType_settlePush      PBTransferType = 1
	PBTransferType_settlePull      PBTransferType = 2
	PBTransferType_transferPush    PBTransferType = 3
	PBTransferType_transferPull    PBTransferType = 4
	PBTransferType_swap            PBTransferType = 5
	PBTransferType_load            PBTransferType = 6
	PBTransferType_GroupDefinition PBTransferType = 7
)

var PBTransferType_name = map[int32]string{
	0: "unspecified",
	1: "settlePush",
	2: "settlePull",
	3: "transferPush",
	4: "transferPull",
	5: "swap",
	6: "load",
	7: "GroupDefinition",
}

var PBTransferType_value = map[string]int32{
	"unspecified":     0,
	"settlePush":      1,
	"settlePull":      2,
	"transferPush":    3,
	"transferPull":    4,
	"swap":            5,
	"load":            6,
	"GroupDefinition": 7,
}

func (x PBTransferType) String() string {
	return proto.EnumName(PBTransferType_name, int32(x))
}

func (PBTransferType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_610ca40ce07a87fe, []int{1}
}

type PBGroupType int32

const (
	PBGroupType_default      PBGroupType = 0
	PBGroupType_trusteeGroup PBGroupType = 1
)

var PBGroupType_name = map[int32]string{
	0: "default",
	1: "trusteeGroup",
}

var PBGroupType_value = map[string]int32{
	"default":      0,
	"trusteeGroup": 1,
}

func (x PBGroupType) String() string {
	return proto.EnumName(PBGroupType_name, int32(x))
}

func (PBGroupType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_610ca40ce07a87fe, []int{2}
}

type PBSignedAsset struct {
	Signature []byte            `protobuf:"bytes,1,opt,name=Signature,proto3" json:"Signature,omitempty"`
	PublicKey []byte            `protobuf:"bytes,2,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	Signers   map[string][]byte `protobuf:"bytes,3,rep,name=Signers,proto3" json:"Signers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//repeated string Signers    = 3;
	Asset                *PBAsset `protobuf:"bytes,4,opt,name=Asset,proto3" json:"Asset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PBSignedAsset) Reset()         { *m = PBSignedAsset{} }
func (m *PBSignedAsset) String() string { return proto.CompactTextString(m) }
func (*PBSignedAsset) ProtoMessage()    {}
func (*PBSignedAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_610ca40ce07a87fe, []int{0}
}
func (m *PBSignedAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PBSignedAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PBSignedAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBSignedAsset.Merge(m, src)
}
func (m *PBSignedAsset) XXX_Size() int {
	return m.Size()
}
func (m *PBSignedAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_PBSignedAsset.DiscardUnknown(m)
}

var xxx_messageInfo_PBSignedAsset proto.InternalMessageInfo

func (m *PBSignedAsset) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PBSignedAsset) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *PBSignedAsset) GetSigners() map[string][]byte {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *PBSignedAsset) GetAsset() *PBAsset {
	if m != nil {
		return m.Asset
	}
	return nil
}

type PBAsset struct {
	Type         PBAssetType    `protobuf:"varint,1,opt,name=Type,proto3,enum=protobuffer.PBAssetType" json:"Type,omitempty"`
	ID           []byte         `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Owner        []byte         `protobuf:"bytes,3,opt,name=Owner,proto3" json:"Owner,omitempty"`
	TransferType PBTransferType `protobuf:"varint,4,opt,name=TransferType,proto3,enum=protobuffer.PBTransferType" json:"TransferType,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*PBAsset_Wallet
	//	*PBAsset_Group
	//	*PBAsset_Iddoc
	Payload              isPBAsset_Payload      `protobuf_oneof:"Payload"`
	Transferlist         map[string]*PBTransfer `protobuf:"bytes,8,rep,name=Transferlist,proto3" json:"Transferlist,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *PBAsset) Reset()         { *m = PBAsset{} }
func (m *PBAsset) String() string { return proto.CompactTextString(m) }
func (*PBAsset) ProtoMessage()    {}
func (*PBAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_610ca40ce07a87fe, []int{1}
}
func (m *PBAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PBAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PBAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBAsset.Merge(m, src)
}
func (m *PBAsset) XXX_Size() int {
	return m.Size()
}
func (m *PBAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_PBAsset.DiscardUnknown(m)
}

var xxx_messageInfo_PBAsset proto.InternalMessageInfo

type isPBAsset_Payload interface {
	isPBAsset_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PBAsset_Wallet struct {
	Wallet *PBWallet `protobuf:"bytes,5,opt,name=Wallet,proto3,oneof" json:"Wallet,omitempty"`
}
type PBAsset_Group struct {
	Group *PBGroup `protobuf:"bytes,6,opt,name=Group,proto3,oneof" json:"Group,omitempty"`
}
type PBAsset_Iddoc struct {
	Iddoc *PBIDDoc `protobuf:"bytes,7,opt,name=Iddoc,proto3,oneof" json:"Iddoc,omitempty"`
}

func (*PBAsset_Wallet) isPBAsset_Payload() {}
func (*PBAsset_Group) isPBAsset_Payload()  {}
func (*PBAsset_Iddoc) isPBAsset_Payload()  {}

func (m *PBAsset) GetPayload() isPBAsset_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PBAsset) GetType() PBAssetType {
	if m != nil {
		return m.Type
	}
	return PBAssetType_wallet
}

func (m *PBAsset) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *PBAsset) GetOwner() []byte {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *PBAsset) GetTransferType() PBTransferType {
	if m != nil {
		return m.TransferType
	}
	return PBTransferType_unspecified
}

func (m *PBAsset) GetWallet() *PBWallet {
	if x, ok := m.GetPayload().(*PBAsset_Wallet); ok {
		return x.Wallet
	}
	return nil
}

func (m *PBAsset) GetGroup() *PBGroup {
	if x, ok := m.GetPayload().(*PBAsset_Group); ok {
		return x.Group
	}
	return nil
}

func (m *PBAsset) GetIddoc() *PBIDDoc {
	if x, ok := m.GetPayload().(*PBAsset_Iddoc); ok {
		return x.Iddoc
	}
	return nil
}

func (m *PBAsset) GetTransferlist() map[string]*PBTransfer {
	if m != nil {
		return m.Transferlist
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PBAsset) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PBAsset_Wallet)(nil),
		(*PBAsset_Group)(nil),
		(*PBAsset_Iddoc)(nil),
	}
}

type PBTransfer struct {
	Type                 PBTransferType    `protobuf:"varint,1,opt,name=Type,proto3,enum=protobuffer.PBTransferType" json:"Type,omitempty"`
	Expression           string            `protobuf:"bytes,2,opt,name=Expression,proto3" json:"Expression,omitempty"`
	Participants         map[string][]byte `protobuf:"bytes,3,rep,name=Participants,proto3" json:"Participants,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description          string            `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PBTransfer) Reset()         { *m = PBTransfer{} }
func (m *PBTransfer) String() string { return proto.CompactTextString(m) }
func (*PBTransfer) ProtoMessage()    {}
func (*PBTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_610ca40ce07a87fe, []int{2}
}
func (m *PBTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PBTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PBTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBTransfer.Merge(m, src)
}
func (m *PBTransfer) XXX_Size() int {
	return m.Size()
}
func (m *PBTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_PBTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_PBTransfer proto.InternalMessageInfo

func (m *PBTransfer) GetType() PBTransferType {
	if m != nil {
		return m.Type
	}
	return PBTransferType_unspecified
}

func (m *PBTransfer) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

func (m *PBTransfer) GetParticipants() map[string][]byte {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *PBTransfer) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

//Asset Definitons
type PBWallet struct {
	Description          string   `protobuf:"bytes,1,opt,name=Description,proto3" json:"Description,omitempty"`
	Principal            []byte   `protobuf:"bytes,2,opt,name=principal,proto3" json:"principal,omitempty"`
	Creditor             []byte   `protobuf:"bytes,3,opt,name=creditor,proto3" json:"creditor,omitempty"`
	Initiator            []byte   `protobuf:"bytes,4,opt,name=initiator,proto3" json:"initiator,omitempty"`
	Address              []byte   `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Counterparty         []byte   `protobuf:"bytes,6,opt,name=counterparty,proto3" json:"counterparty,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PBWallet) Reset()         { *m = PBWallet{} }
func (m *PBWallet) String() string { return proto.CompactTextString(m) }
func (*PBWallet) ProtoMessage()    {}
func (*PBWallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_610ca40ce07a87fe, []int{3}
}
func (m *PBWallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PBWallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PBWallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBWallet.Merge(m, src)
}
func (m *PBWallet) XXX_Size() int {
	return m.Size()
}
func (m *PBWallet) XXX_DiscardUnknown() {
	xxx_messageInfo_PBWallet.DiscardUnknown(m)
}

var xxx_messageInfo_PBWallet proto.InternalMessageInfo

func (m *PBWallet) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *PBWallet) GetPrincipal() []byte {
	if m != nil {
		return m.Principal
	}
	return nil
}

func (m *PBWallet) GetCreditor() []byte {
	if m != nil {
		return m.Creditor
	}
	return nil
}

func (m *PBWallet) GetInitiator() []byte {
	if m != nil {
		return m.Initiator
	}
	return nil
}

func (m *PBWallet) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *PBWallet) GetCounterparty() []byte {
	if m != nil {
		return m.Counterparty
	}
	return nil
}

type PBGroup struct {
	Type                 PBGroupType       `protobuf:"varint,1,opt,name=Type,proto3,enum=protobuffer.PBGroupType" json:"Type,omitempty"`
	GroupFields          map[string][]byte `protobuf:"bytes,2,rep,name=GroupFields,proto3" json:"GroupFields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Participants         map[string][]byte `protobuf:"bytes,3,rep,name=Participants,proto3" json:"Participants,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Description          string            `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PBGroup) Reset()         { *m = PBGroup{} }
func (m *PBGroup) String() string { return proto.CompactTextString(m) }
func (*PBGroup) ProtoMessage()    {}
func (*PBGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_610ca40ce07a87fe, []int{4}
}
func (m *PBGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PBGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PBGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBGroup.Merge(m, src)
}
func (m *PBGroup) XXX_Size() int {
	return m.Size()
}
func (m *PBGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_PBGroup.DiscardUnknown(m)
}

var xxx_messageInfo_PBGroup proto.InternalMessageInfo

func (m *PBGroup) GetType() PBGroupType {
	if m != nil {
		return m.Type
	}
	return PBGroupType_default
}

func (m *PBGroup) GetGroupFields() map[string][]byte {
	if m != nil {
		return m.GroupFields
	}
	return nil
}

func (m *PBGroup) GetParticipants() map[string][]byte {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *PBGroup) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type PBIDDoc struct {
	AuthenticationReference string   `protobuf:"bytes,1,opt,name=AuthenticationReference,proto3" json:"AuthenticationReference,omitempty"`
	BeneficiaryECPublicKey  []byte   `protobuf:"bytes,2,opt,name=BeneficiaryECPublicKey,proto3" json:"BeneficiaryECPublicKey,omitempty"`
	SikePublicKey           []byte   `protobuf:"bytes,3,opt,name=SikePublicKey,proto3" json:"SikePublicKey,omitempty"`
	BLSPublicKey            []byte   `protobuf:"bytes,4,opt,name=BLSPublicKey,proto3" json:"BLSPublicKey,omitempty"`
	Timestamp               int64    `protobuf:"varint,5,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *PBIDDoc) Reset()         { *m = PBIDDoc{} }
func (m *PBIDDoc) String() string { return proto.CompactTextString(m) }
func (*PBIDDoc) ProtoMessage()    {}
func (*PBIDDoc) Descriptor() ([]byte, []int) {
	return fileDescriptor_610ca40ce07a87fe, []int{5}
}
func (m *PBIDDoc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PBIDDoc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PBIDDoc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBIDDoc.Merge(m, src)
}
func (m *PBIDDoc) XXX_Size() int {
	return m.Size()
}
func (m *PBIDDoc) XXX_DiscardUnknown() {
	xxx_messageInfo_PBIDDoc.DiscardUnknown(m)
}

var xxx_messageInfo_PBIDDoc proto.InternalMessageInfo

func (m *PBIDDoc) GetAuthenticationReference() string {
	if m != nil {
		return m.AuthenticationReference
	}
	return ""
}

func (m *PBIDDoc) GetBeneficiaryECPublicKey() []byte {
	if m != nil {
		return m.BeneficiaryECPublicKey
	}
	return nil
}

func (m *PBIDDoc) GetSikePublicKey() []byte {
	if m != nil {
		return m.SikePublicKey
	}
	return nil
}

func (m *PBIDDoc) GetBLSPublicKey() []byte {
	if m != nil {
		return m.BLSPublicKey
	}
	return nil
}

func (m *PBIDDoc) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterEnum("protobuffer.PBAssetType", PBAssetType_name, PBAssetType_value)
	proto.RegisterEnum("protobuffer.PBTransferType", PBTransferType_name, PBTransferType_value)
	proto.RegisterEnum("protobuffer.PBGroupType", PBGroupType_name, PBGroupType_value)
	proto.RegisterType((*PBSignedAsset)(nil), "protobuffer.PBSignedAsset")
	proto.RegisterMapType((map[string][]byte)(nil), "protobuffer.PBSignedAsset.SignersEntry")
	proto.RegisterType((*PBAsset)(nil), "protobuffer.PBAsset")
	proto.RegisterMapType((map[string]*PBTransfer)(nil), "protobuffer.PBAsset.TransferlistEntry")
	proto.RegisterType((*PBTransfer)(nil), "protobuffer.PBTransfer")
	proto.RegisterMapType((map[string][]byte)(nil), "protobuffer.PBTransfer.ParticipantsEntry")
	proto.RegisterType((*PBWallet)(nil), "protobuffer.PBWallet")
	proto.RegisterType((*PBGroup)(nil), "protobuffer.PBGroup")
	proto.RegisterMapType((map[string][]byte)(nil), "protobuffer.PBGroup.GroupFieldsEntry")
	proto.RegisterMapType((map[string][]byte)(nil), "protobuffer.PBGroup.ParticipantsEntry")
	proto.RegisterType((*PBIDDoc)(nil), "protobuffer.PBIDDoc")
}

func init() { proto.RegisterFile("assets.proto", fileDescriptor_610ca40ce07a87fe) }

var fileDescriptor_610ca40ce07a87fe = []byte{
	// 867 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x4d, 0x6f, 0xdb, 0x46,
	0x10, 0x15, 0xa9, 0x2f, 0x6b, 0xc8, 0x38, 0xcc, 0xd6, 0x6d, 0x08, 0xb5, 0x10, 0x0c, 0xa1, 0x4d,
	0x5d, 0xc3, 0x91, 0x00, 0x17, 0x28, 0x82, 0x1c, 0x1a, 0x58, 0x95, 0x9b, 0xb8, 0x1f, 0xa8, 0x40,
	0x1b, 0x68, 0xaf, 0x6b, 0x72, 0x68, 0x2f, 0x42, 0x93, 0xc4, 0xee, 0xb2, 0xae, 0xfe, 0x44, 0x7b,
	0xed, 0xef, 0xe9, 0xa9, 0xc7, 0x1e, 0x7b, 0xe8, 0xa1, 0x70, 0x7e, 0x40, 0x6f, 0x3d, 0x07, 0xbb,
	0x24, 0x25, 0x52, 0xa6, 0x03, 0x04, 0x39, 0x89, 0x33, 0xf3, 0xe6, 0xcd, 0xee, 0xbe, 0xb7, 0x2b,
	0xb0, 0xa9, 0x10, 0x28, 0xc5, 0x24, 0xe5, 0x89, 0x4c, 0x88, 0xa5, 0x7f, 0xce, 0xb3, 0x30, 0x44,
	0x3e, 0x7c, 0x7c, 0xc1, 0xe4, 0x65, 0x76, 0x3e, 0xf1, 0x93, 0xab, 0xe9, 0x45, 0x72, 0x91, 0x4c,
	0xcb, 0xa2, 0x8e, 0x74, 0xa0, 0xbf, 0xf2, 0xde, 0xf1, 0xff, 0x06, 0xdc, 0x5b, 0xcc, 0x4e, 0xd9,
	0x45, 0x8c, 0xc1, 0x91, 0x22, 0x25, 0x1f, 0xc1, 0x40, 0x85, 0x54, 0x66, 0x1c, 0x5d, 0x63, 0xd7,
	0xd8, 0xb3, 0xbd, 0x75, 0x42, 0x55, 0x17, 0xd9, 0x79, 0xc4, 0xfc, 0x6f, 0x71, 0xe9, 0x9a, 0x79,
	0x75, 0x95, 0x20, 0x47, 0xd0, 0xd7, 0x54, 0x5c, 0xb8, 0xed, 0xdd, 0xf6, 0x9e, 0x75, 0xf8, 0xe9,
	0xa4, 0xb2, 0xb6, 0x49, 0x6d, 0xd0, 0xa4, 0x40, 0x1e, 0xc7, 0x92, 0x2f, 0xbd, 0xb2, 0x8f, 0xec,
	0x43, 0x57, 0x97, 0xdd, 0xce, 0xae, 0xb1, 0x67, 0x1d, 0xee, 0x6c, 0x10, 0xe8, 0x9a, 0x97, 0x43,
	0x86, 0x4f, 0xc1, 0xae, 0x92, 0x10, 0x07, 0xda, 0x2f, 0x71, 0xa9, 0x17, 0x3d, 0xf0, 0xd4, 0x27,
	0xd9, 0x81, 0xee, 0xcf, 0x34, 0xca, 0xb0, 0x58, 0x6a, 0x1e, 0x3c, 0x35, 0x9f, 0x18, 0xe3, 0x7f,
	0xda, 0xd0, 0x2f, 0xe8, 0xc8, 0x01, 0x74, 0xce, 0x96, 0x69, 0xbe, 0xdb, 0xed, 0x43, 0xb7, 0x69,
	0xa4, 0xaa, 0x7b, 0x1a, 0x45, 0xb6, 0xc1, 0x3c, 0x99, 0x17, 0x84, 0xe6, 0xc9, 0x5c, 0xcd, 0xf8,
	0xe1, 0x3a, 0x46, 0xee, 0xb6, 0xf3, 0x19, 0x3a, 0x20, 0xcf, 0xc0, 0x3e, 0xe3, 0x34, 0x16, 0x21,
	0x72, 0xcd, 0xdd, 0xd1, 0xdc, 0x1f, 0x6e, 0x70, 0x57, 0x21, 0x5e, 0xad, 0x81, 0x4c, 0xa1, 0xf7,
	0x23, 0x8d, 0x22, 0x94, 0x6e, 0x57, 0x9f, 0xc4, 0xfb, 0x1b, 0xad, 0x79, 0xf1, 0x45, 0xcb, 0x2b,
	0x60, 0xe4, 0x00, 0xba, 0xcf, 0x79, 0x92, 0xa5, 0x6e, 0xaf, 0xf1, 0xe4, 0x74, 0xed, 0x45, 0xcb,
	0xcb, 0x41, 0x0a, 0x7d, 0x12, 0x04, 0x89, 0xef, 0xf6, 0x1b, 0xd1, 0x27, 0xf3, 0x79, 0xe2, 0x2b,
	0xb4, 0x06, 0x91, 0x6f, 0xd6, 0xbb, 0x89, 0x98, 0x90, 0xee, 0x96, 0x56, 0xf7, 0x51, 0xd3, 0x49,
	0x4d, 0xaa, 0xc0, 0x5c, 0xdc, 0x5a, 0xef, 0xf0, 0x27, 0x78, 0x70, 0x0b, 0xd2, 0x20, 0xdd, 0xe3,
	0xaa, 0x74, 0xd6, 0xe1, 0xc3, 0x3b, 0x4e, 0xae, 0xa2, 0xe9, 0x6c, 0x00, 0xfd, 0x05, 0x5d, 0x46,
	0x09, 0x0d, 0xc6, 0xbf, 0x99, 0x00, 0x6b, 0x10, 0x99, 0xd6, 0x14, 0x7e, 0xa3, 0x0a, 0xb9, 0xc8,
	0x23, 0x80, 0xe3, 0x5f, 0x52, 0x8e, 0x42, 0xb0, 0x24, 0xd6, 0x4b, 0x18, 0x78, 0x95, 0x0c, 0xf9,
	0x1e, 0xec, 0x05, 0xe5, 0x92, 0xf9, 0x2c, 0xa5, 0xb1, 0x2c, 0xed, 0xfe, 0xd9, 0x1d, 0xc4, 0x93,
	0x2a, 0xb6, 0x38, 0x93, 0x6a, 0x8a, 0xec, 0x82, 0x35, 0x47, 0xe1, 0x73, 0x96, 0x4a, 0x35, 0xaf,
	0xa3, 0xe7, 0x55, 0x53, 0xc3, 0x67, 0xf0, 0xe0, 0x16, 0xc9, 0x5b, 0x19, 0xfe, 0x0f, 0x03, 0xb6,
	0x4a, 0xd7, 0x6c, 0xce, 0x33, 0x6e, 0xcd, 0x53, 0x17, 0x3d, 0xe5, 0x2c, 0x56, 0xe3, 0xa2, 0xf2,
	0xa2, 0xaf, 0x12, 0x64, 0x08, 0x5b, 0x3e, 0xc7, 0x80, 0xc9, 0xa4, 0xb4, 0xfd, 0x2a, 0x56, 0x9d,
	0x2c, 0x66, 0x92, 0x51, 0x55, 0xec, 0xe4, 0x9d, 0xab, 0x04, 0x71, 0xa1, 0x4f, 0x83, 0x40, 0x1d,
	0xa3, 0xf6, 0xb5, 0xed, 0x95, 0x21, 0x19, 0x83, 0xed, 0x27, 0x59, 0x2c, 0x91, 0xa7, 0x94, 0xcb,
	0xa5, 0xb6, 0xb1, 0xed, 0xd5, 0x72, 0xe3, 0xff, 0x4c, 0x75, 0x6b, 0x4b, 0x07, 0xbf, 0xe9, 0xd6,
	0x6a, 0x4c, 0x45, 0xd0, 0xe7, 0x60, 0xe9, 0xd4, 0xd7, 0x0c, 0xa3, 0x40, 0xb8, 0xa6, 0xd6, 0xeb,
	0x93, 0xa6, 0xa6, 0x49, 0x05, 0x97, 0x6b, 0x55, 0xed, 0x54, 0x57, 0xa1, 0x41, 0xf9, 0x47, 0x8d,
	0x4c, 0xef, 0x2e, 0xfb, 0x97, 0xe0, 0x6c, 0x2e, 0xe7, 0x6d, 0x54, 0x7f, 0x77, 0xdb, 0xbc, 0x32,
	0xd4, 0x89, 0xeb, 0xe7, 0x80, 0x3c, 0x81, 0x87, 0x47, 0x99, 0xbc, 0xc4, 0x58, 0x32, 0x9f, 0xaa,
	0xe5, 0x79, 0x18, 0x22, 0xc7, 0xd8, 0xc7, 0x82, 0xeb, 0xae, 0x32, 0xf9, 0x02, 0x3e, 0x98, 0x61,
	0x8c, 0x21, 0xf3, 0x19, 0xe5, 0xcb, 0xe3, 0xaf, 0x36, 0xff, 0x43, 0xee, 0xa8, 0x92, 0x8f, 0xe1,
	0xde, 0x29, 0x7b, 0x89, 0x6b, 0x78, 0x6e, 0xb6, 0x7a, 0x52, 0x39, 0x67, 0xf6, 0xdd, 0xe9, 0x1a,
	0x94, 0x9b, 0xae, 0x96, 0x53, 0xae, 0x3c, 0x63, 0x57, 0x28, 0x24, 0xbd, 0x4a, 0xb5, 0xf3, 0xda,
	0xde, 0x3a, 0xb1, 0x3f, 0x05, 0xab, 0xf2, 0xd0, 0x13, 0x80, 0xde, 0xb5, 0xbe, 0x28, 0x4e, 0x8b,
	0x0c, 0x8a, 0x67, 0xd5, 0x31, 0xd4, 0x27, 0x53, 0xcf, 0xa1, 0x63, 0xee, 0xff, 0x6a, 0xc0, 0x76,
	0xfd, 0xe1, 0x20, 0xf7, 0xc1, 0xca, 0x62, 0x91, 0xa2, 0xcf, 0x42, 0x86, 0x81, 0xd3, 0x22, 0xdb,
	0x00, 0x02, 0xa5, 0x8c, 0x70, 0x91, 0x89, 0x4b, 0xc7, 0xa8, 0xc6, 0x51, 0xe4, 0x98, 0xc4, 0x01,
	0x5b, 0x16, 0x04, 0x1a, 0xd1, 0xae, 0x67, 0xa2, 0xc8, 0xe9, 0x90, 0x2d, 0xe8, 0x88, 0x6b, 0x9a,
	0x3a, 0x5d, 0xf5, 0xa5, 0x5e, 0x36, 0xa7, 0x47, 0xde, 0x83, 0xfb, 0x7a, 0x45, 0x73, 0x0c, 0xf5,
	0xbd, 0x4a, 0x62, 0xa7, 0xbf, 0x7f, 0xa0, 0x76, 0xb0, 0x32, 0x3d, 0xb1, 0xa0, 0x1f, 0x60, 0x48,
	0xb3, 0x48, 0x6d, 0x41, 0xd3, 0x66, 0x42, 0x22, 0x16, 0x3b, 0x99, 0xed, 0xfc, 0x79, 0x33, 0x32,
	0xfe, 0xba, 0x19, 0x19, 0x7f, 0xdf, 0x8c, 0x8c, 0x7f, 0x6f, 0x46, 0xc6, 0xef, 0xaf, 0x46, 0xad,
	0xf3, 0x9e, 0xf6, 0xf0, 0xe7, 0xaf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x12, 0xce, 0x4a, 0x5f,
	0x08, 0x00, 0x00,
}

func (m *PBSignedAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBSignedAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PBSignedAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Asset != nil {
		{
			size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAssets(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signers) > 0 {
		keysForSigners := make([]string, 0, len(m.Signers))
		for k := range m.Signers {
			keysForSigners = append(keysForSigners, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForSigners)
		for iNdEx := len(keysForSigners) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Signers[string(keysForSigners[iNdEx])]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintAssets(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForSigners[iNdEx])
			copy(dAtA[i:], keysForSigners[iNdEx])
			i = encodeVarintAssets(dAtA, i, uint64(len(keysForSigners[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAssets(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintAssets(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintAssets(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PBAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PBAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Transferlist) > 0 {
		keysForTransferlist := make([]string, 0, len(m.Transferlist))
		for k := range m.Transferlist {
			keysForTransferlist = append(keysForTransferlist, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTransferlist)
		for iNdEx := len(keysForTransferlist) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Transferlist[string(keysForTransferlist[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintAssets(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForTransferlist[iNdEx])
			copy(dAtA[i:], keysForTransferlist[iNdEx])
			i = encodeVarintAssets(dAtA, i, uint64(len(keysForTransferlist[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAssets(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Payload != nil {
		{
			size := m.Payload.Size()
			i -= size
			if _, err := m.Payload.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.TransferType != 0 {
		i = encodeVarintAssets(dAtA, i, uint64(m.TransferType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintAssets(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintAssets(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintAssets(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PBAsset_Wallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PBAsset_Wallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Wallet != nil {
		{
			size, err := m.Wallet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAssets(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *PBAsset_Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PBAsset_Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAssets(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *PBAsset_Iddoc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PBAsset_Iddoc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Iddoc != nil {
		{
			size, err := m.Iddoc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAssets(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *PBTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PBTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAssets(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Participants) > 0 {
		keysForParticipants := make([]string, 0, len(m.Participants))
		for k := range m.Participants {
			keysForParticipants = append(keysForParticipants, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForParticipants)
		for iNdEx := len(keysForParticipants) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Participants[string(keysForParticipants[iNdEx])]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintAssets(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForParticipants[iNdEx])
			copy(dAtA[i:], keysForParticipants[iNdEx])
			i = encodeVarintAssets(dAtA, i, uint64(len(keysForParticipants[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAssets(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Expression) > 0 {
		i -= len(m.Expression)
		copy(dAtA[i:], m.Expression)
		i = encodeVarintAssets(dAtA, i, uint64(len(m.Expression)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintAssets(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PBWallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBWallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PBWallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Counterparty) > 0 {
		i -= len(m.Counterparty)
		copy(dAtA[i:], m.Counterparty)
		i = encodeVarintAssets(dAtA, i, uint64(len(m.Counterparty)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAssets(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Initiator) > 0 {
		i -= len(m.Initiator)
		copy(dAtA[i:], m.Initiator)
		i = encodeVarintAssets(dAtA, i, uint64(len(m.Initiator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Creditor) > 0 {
		i -= len(m.Creditor)
		copy(dAtA[i:], m.Creditor)
		i = encodeVarintAssets(dAtA, i, uint64(len(m.Creditor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Principal) > 0 {
		i -= len(m.Principal)
		copy(dAtA[i:], m.Principal)
		i = encodeVarintAssets(dAtA, i, uint64(len(m.Principal)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAssets(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PBGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PBGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintAssets(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Participants) > 0 {
		keysForParticipants := make([]string, 0, len(m.Participants))
		for k := range m.Participants {
			keysForParticipants = append(keysForParticipants, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForParticipants)
		for iNdEx := len(keysForParticipants) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Participants[string(keysForParticipants[iNdEx])]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintAssets(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForParticipants[iNdEx])
			copy(dAtA[i:], keysForParticipants[iNdEx])
			i = encodeVarintAssets(dAtA, i, uint64(len(keysForParticipants[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAssets(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.GroupFields) > 0 {
		keysForGroupFields := make([]string, 0, len(m.GroupFields))
		for k := range m.GroupFields {
			keysForGroupFields = append(keysForGroupFields, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForGroupFields)
		for iNdEx := len(keysForGroupFields) - 1; iNdEx >= 0; iNdEx-- {
			v := m.GroupFields[string(keysForGroupFields[iNdEx])]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintAssets(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForGroupFields[iNdEx])
			copy(dAtA[i:], keysForGroupFields[iNdEx])
			i = encodeVarintAssets(dAtA, i, uint64(len(keysForGroupFields[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAssets(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintAssets(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PBIDDoc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PBIDDoc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PBIDDoc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timestamp != 0 {
		i = encodeVarintAssets(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BLSPublicKey) > 0 {
		i -= len(m.BLSPublicKey)
		copy(dAtA[i:], m.BLSPublicKey)
		i = encodeVarintAssets(dAtA, i, uint64(len(m.BLSPublicKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SikePublicKey) > 0 {
		i -= len(m.SikePublicKey)
		copy(dAtA[i:], m.SikePublicKey)
		i = encodeVarintAssets(dAtA, i, uint64(len(m.SikePublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BeneficiaryECPublicKey) > 0 {
		i -= len(m.BeneficiaryECPublicKey)
		copy(dAtA[i:], m.BeneficiaryECPublicKey)
		i = encodeVarintAssets(dAtA, i, uint64(len(m.BeneficiaryECPublicKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AuthenticationReference) > 0 {
		i -= len(m.AuthenticationReference)
		copy(dAtA[i:], m.AuthenticationReference)
		i = encodeVarintAssets(dAtA, i, uint64(len(m.AuthenticationReference)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAssets(dAtA []byte, offset int, v uint64) int {
	offset -= sovAssets(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PBSignedAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovAssets(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovAssets(uint64(l))
	}
	if len(m.Signers) > 0 {
		for k, v := range m.Signers {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovAssets(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovAssets(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAssets(uint64(mapEntrySize))
		}
	}
	if m.Asset != nil {
		l = m.Asset.Size()
		n += 1 + l + sovAssets(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PBAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovAssets(uint64(m.Type))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovAssets(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAssets(uint64(l))
	}
	if m.TransferType != 0 {
		n += 1 + sovAssets(uint64(m.TransferType))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	if len(m.Transferlist) > 0 {
		for k, v := range m.Transferlist {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAssets(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovAssets(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAssets(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PBAsset_Wallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wallet != nil {
		l = m.Wallet.Size()
		n += 1 + l + sovAssets(uint64(l))
	}
	return n
}
func (m *PBAsset_Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovAssets(uint64(l))
	}
	return n
}
func (m *PBAsset_Iddoc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Iddoc != nil {
		l = m.Iddoc.Size()
		n += 1 + l + sovAssets(uint64(l))
	}
	return n
}
func (m *PBTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovAssets(uint64(m.Type))
	}
	l = len(m.Expression)
	if l > 0 {
		n += 1 + l + sovAssets(uint64(l))
	}
	if len(m.Participants) > 0 {
		for k, v := range m.Participants {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovAssets(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovAssets(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAssets(uint64(mapEntrySize))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAssets(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PBWallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAssets(uint64(l))
	}
	l = len(m.Principal)
	if l > 0 {
		n += 1 + l + sovAssets(uint64(l))
	}
	l = len(m.Creditor)
	if l > 0 {
		n += 1 + l + sovAssets(uint64(l))
	}
	l = len(m.Initiator)
	if l > 0 {
		n += 1 + l + sovAssets(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAssets(uint64(l))
	}
	l = len(m.Counterparty)
	if l > 0 {
		n += 1 + l + sovAssets(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PBGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovAssets(uint64(m.Type))
	}
	if len(m.GroupFields) > 0 {
		for k, v := range m.GroupFields {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovAssets(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovAssets(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAssets(uint64(mapEntrySize))
		}
	}
	if len(m.Participants) > 0 {
		for k, v := range m.Participants {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovAssets(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovAssets(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovAssets(uint64(mapEntrySize))
		}
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovAssets(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PBIDDoc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuthenticationReference)
	if l > 0 {
		n += 1 + l + sovAssets(uint64(l))
	}
	l = len(m.BeneficiaryECPublicKey)
	if l > 0 {
		n += 1 + l + sovAssets(uint64(l))
	}
	l = len(m.SikePublicKey)
	if l > 0 {
		n += 1 + l + sovAssets(uint64(l))
	}
	l = len(m.BLSPublicKey)
	if l > 0 {
		n += 1 + l + sovAssets(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovAssets(uint64(m.Timestamp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAssets(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAssets(x uint64) (n int) {
	return sovAssets(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PBSignedAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBSignedAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBSignedAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signers == nil {
				m.Signers = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssets
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAssets
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAssets
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssets
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthAssets
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthAssets
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAssets(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAssets
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Signers[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Asset == nil {
				m.Asset = &PBAsset{}
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssets
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PBAssetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferType", wireType)
			}
			m.TransferType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransferType |= PBTransferType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PBWallet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &PBAsset_Wallet{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PBGroup{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &PBAsset_Group{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iddoc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PBIDDoc{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &PBAsset_Iddoc{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transferlist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transferlist == nil {
				m.Transferlist = make(map[string]*PBTransfer)
			}
			var mapkey string
			var mapvalue *PBTransfer
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssets
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAssets
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAssets
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssets
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAssets
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAssets
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PBTransfer{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAssets(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAssets
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Transferlist[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssets
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PBTransferType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expression", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expression = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participants == nil {
				m.Participants = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssets
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAssets
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAssets
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssets
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthAssets
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthAssets
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAssets(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAssets
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Participants[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssets
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBWallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBWallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBWallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Principal = append(m.Principal[:0], dAtA[iNdEx:postIndex]...)
			if m.Principal == nil {
				m.Principal = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creditor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creditor = append(m.Creditor[:0], dAtA[iNdEx:postIndex]...)
			if m.Creditor == nil {
				m.Creditor = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Initiator = append(m.Initiator[:0], dAtA[iNdEx:postIndex]...)
			if m.Initiator == nil {
				m.Initiator = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counterparty", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counterparty = append(m.Counterparty[:0], dAtA[iNdEx:postIndex]...)
			if m.Counterparty == nil {
				m.Counterparty = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssets
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PBGroupType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupFields == nil {
				m.GroupFields = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssets
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAssets
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAssets
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssets
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthAssets
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthAssets
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAssets(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAssets
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.GroupFields[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Participants == nil {
				m.Participants = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAssets
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssets
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAssets
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAssets
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAssets
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthAssets
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthAssets
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAssets(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAssets
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Participants[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssets
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PBIDDoc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PBIDDoc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PBIDDoc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationReference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthenticationReference = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeneficiaryECPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeneficiaryECPublicKey = append(m.BeneficiaryECPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.BeneficiaryECPublicKey == nil {
				m.BeneficiaryECPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SikePublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SikePublicKey = append(m.SikePublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.SikePublicKey == nil {
				m.SikePublicKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BLSPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAssets
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAssets
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BLSPublicKey = append(m.BLSPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.BLSPublicKey == nil {
				m.BLSPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAssets
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAssets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAssets(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAssets
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAssets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAssets
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAssets
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAssets
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAssets        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAssets          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAssets = fmt.Errorf("proto: unexpected end of group")
)
