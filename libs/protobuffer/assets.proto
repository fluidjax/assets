syntax = "proto3";
package protobuffer;
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

//This option to force determinstic serializations 
option (gogoproto.stable_marshaler_all) = true;



message PBSignedAsset{
    bytes Signature            = 1;
    bytes PublicKey            = 2;
    map<string, bytes> Signers = 3;
    //repeated string Signers    = 3;
    PBAsset Asset              = 4;
}

message PBAsset {
	PBAssetType Type                = 1;            //Type of Asset
	bytes ID                        = 2;            //unique ID of asset
    bytes Owner                     = 3;            //IDDoc of owner            
    PBTransferType TransferType     = 4;            //Which transfer used to get to this version
    oneof Payload {                                 //Definiton of the asset
        PBWallet Wallet             = 5;
        PBGroup Group               = 6;
        PBIDDoc Iddoc               = 7;
    }
    map<string, PBTransfer> Transferlist = 8;
}


enum PBAssetType {
	wallet      = 0;
	Group       = 1;
	iddoc       = 2;
}                              
enum PBTransferType {
    unspecified         = 0;
    settlePush          = 1;
    settlePull          = 2;
    transferPush        = 3;
    transferPull        = 4;
    swap                = 5;
    load                = 6;
    GroupDefinition     = 7;
}

message PBTransfer {                  //Defined for each Transfer type an expression that must return true to allow transfer to be performed
    PBTransferType Type             = 1;	
    string Expression               = 2;              //Boolean expression eg. (Sig1 + Sig2 + Sig3) >=2 & Owner   
    map<string, bytes> Participants = 3;
    string Description              = 4; 
}

//Asset Definitons
message PBWallet {
    string Description      = 1;
    bytes principal         = 2;
	bytes creditor          = 3;
	bytes initiator         = 4;
	bytes address           = 5;
    bytes counterparty      = 6;
    bytes transactionHash   = 7;
}


message PBGroup {
    PBGroupType Type                = 1;
    map<string, bytes> GroupFields  = 2; 
    map<string, bytes> Participants = 3;
    string Description              = 4; 
}


enum PBGroupType {
    Default         = 0;
    TrusteeGroup    = 1;
}


message PBIDDoc {
    string AuthenticationReference = 1;
    bytes BeneficiaryECPublicKey   = 2;
    bytes SikePublicKey            = 3;
    bytes BLSPublicKey             = 4;
    int64 Timestamp                = 5;
}


//Written by the MPC in response 
//Contains a public key, used to generate a crypto currency address
message PBAssetCommitment {
    bytes ID                    = 1;    // Asset ID
    bytes pubKey                = 2;    //signature of the transactionHash
}


//MPC Signs the transactionHash and returns signature for later tx composition and broadcast
message PBAssetTransferSignature {
    bytes ID                    = 1;    // Asset ID
    bytes signature             = 2;    //signature of the transactionHash
}