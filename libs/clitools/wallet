#!/bin/bash

# Some Stats for reference:
# 40 hour run,  550,000 TXs
# /tmp/example 884M data directory
# assets/libs/app/data/ 669M
# Restart App and re-process all transaction (they will all exsit so will return with "Fail to add IDDoc - tx already in Consensus Database")
# Time taken = 2mins for 0.5million records.
# Large chain set 'ulimit -n 4096'  else too many open files error
#Use -d flag for debug info


DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
DATADIR=$DIR/data


hasNode=$(qc status -silent)
if [ $? -ne 0 ]; then
    echo "Error Connecting to QredoChain Node"
	exit 1
fi


#set -e

dump (){
	if [ $d_flag = 'true' ]; then
		echo "debug $debug"
		echo $2
		echo -e "\033[40;31;5;82m $1  \033[0m"	
		res=$(echo $1 | sed 's/"/\\"/g')
		echo -e "\033[40;38;5;82m $res  \033[0m"
	fi
}




#----------------------------------------------------------------------------------------------------------------------------------------
MakeWallet() {
	echo Make Wallet and optionally broadcast

	createJSON='
	{
	"transferType": 0,
	"ownerseed":"'$p1_seed'",
	"currency": "BTC",
	"Transfer": [{
		"TransferType": 2,
		"Expression": "t1 + t2 + t3 > 1 & p1",
		"description": "Here is the transfer Type 2",
		"participants": [
			{"name": "p1", "ID": "'$p1_assetid'"},
			{"name": "t1","ID": "'$t1_assetid'"},
			{"name": "t2","ID": "'$t2_assetid'"},
			{"name": "t3","ID": "'$t3_assetid'"}
		]
	}]
	}'

	createJSON=$(echo $createJSON | tr -d '\n')
	createJSON=$(echo $createJSON | tr -d '\r')

	dump "$createJSON" CreateWallet 
	newWallet=$(qc cw -b=true -j="$createJSON")
	serializedSignedAsset=$(echo $newWallet | jq -r .serializedSignedAsset)
	newWalletID=$(echo $newWallet | jq -r .assetid)
}
#----------------------------------------------------------------------------------------------------------------------------------------

VerifyWallet() {
	echo Check Verification
	verify=$(qc vtx "$p1_assetid" "$serializedSignedAsset")
}

#----------------------------------------------------------------------------------------------------------------------------------------

PrepWalletUpdate() {
	echo Prepare Updated Wallet serialized TX for Signing 

	updateJson='{
		"existingWalletAssetID":"'$newWalletID'",
		"newowner":"'$b1_assetid'",
		"transferType":2,
		"currency":"BTC",
		"walletTransfers":[
		    {"to":"01010100ff00","amount":20,"assetid":"00ff00"},
		   	{"to":"02020200ff00","amount":30,"assetid":"00ff01"}
		    ],
		"transfer":[{
			"transferType":2,
			"expression":"t5 + t6 + t7 > 1 & p2",
			"description":"some description goes here",
			"participants":[
				{"name":"p2","ID":"'$p2_assetid'"},
				{"name":"t5","ID":"'$t5_assetid'"},
				{"name":"t6","ID":"'$t6_assetid'"},
				{"name":"t7","ID":"'$t7_assetid'"}
				] }]
		}'

	dump "$updateJson" "PrepWalletUpdate"
	
	updateJson=$(echo $updateJson | sed 's/\n//g')
	updateWallet=$(qc pwu -j="$updateJson")
	serializedUnsignedAsset=$(echo $updateWallet | jq -r .serializedUpdate)
}
#----------------------------------------------------------------------------------------------------------------------------------------

SignForEachIDoc() {
	echo "Sign for each IDDoc"

	#sign for each IDDoc
	json='{"seed":"'$p1_seed'","msg":"'$serializedUnsignedAsset'"}'
	sigP=$(qc sign -j="$json" | jq -r .signature)
	json='{"seed":"'$t1_seed'",	"msg":"'$serializedUnsignedAsset'"}'
	sigT1=$(qc sign -j="$json" | jq -r .signature)
	json='{	"seed":"'$t2_seed'",	"msg":"'$serializedUnsignedAsset'"}'
	sigT2=$(qc sign -j="$json" | jq -r .signature)
	json='{	"seed":"'$t3_seed'",	"msg":"'$serializedUnsignedAsset'"}'
	sigT3=$(qc sign -j="$json" | jq -r .signature)
}



#----------------------------------------------------------------------------------------------------------------------------------------

SendWallet() {
	echo SendWallet - Aggreate Sign, Verify and optionally broadcast
	json='{"sigs":[
				{"id":"'$p1_assetid'","abbreviation":"p1","signature":"'$sigP'"},
				{"id":"'$t1_assetid'","abbreviation":"t1","signature":"'$sigT1'"},
				{"id":"'$t2_assetid'","abbreviation":"t2","signature":"'$sigT2'"},
				{"id":"'$t3_assetid'","abbreviation":"t3","signature":"'$sigT3'"}
				],
			"walletUpdatePayload":'$updateJson'
		}'
	dump "$json" "Aggregate Sign"
	updateComplete=$(qc sw -b=true -j="$json")
}

#----------------------------------------------------------------------------------------------------------------------------------------


SendUnderLying() {
	echo Generate a new underlying transaction

	#A random underlying utxo
	underlyingTXID=$(openssl rand -hex 16)
	json='{
		"type":1,
		"CryptoCurrencyCode":1,
		"Proof":"",
		"Amount":1111,
		"Address":"'$mpcadd'",
		"TxID":"'$underlyingTXID'"
	}'
	dump "$json" "SendUnderLying"
	sendUnderlying=$(qc su -b=true -j="$json")
}


#----------------------------------------------------------------------------------------------------------------------------------------
SendMPC() {

	#Fake an random address from MPC
	mpcadd=$(openssl dgst -sha256 -hmac abc <<< "$newWalletID")

	echo Generate a new MPC transaction
	json='{
    	"type":1,
    	"Address":"'$mpcadd'",
    	"Signature":"",
	    "AssetID":"'$newWalletID'"
	}'
	
	dump "$json" "SendMPC"
	sendUnderlying=$(qc smpc -b=true -j="$json")
}

#----------------------------------------------------------------------------------------------------------------------------------------
GetBalance() {
	balance=$(qc balance "$newWalletID"  | jq -r ".amount")	
	echo Balance: $balance
}


#----------------------------------------------------------------------------------------------------------------------------------------

d_flag='false'

while getopts 'd' flag; do
  case "${flag}" in
    d) d_flag='true' ;;
   esac
done


echo Build Binary
build


debug=false

if [ -x "$(command -v tabset)" ]; then
    tabset happy
fi

#----------------------------------------------------------------------------------------------------------------------------------------


source $DATADIR/assets
MakeWallet
read 
VerifyWallet
SendMPC
SendUnderLying
SendUnderLying
GetBalance
PrepWalletUpdate
SignForEachIDoc
SendWallet
GetBalance





    
