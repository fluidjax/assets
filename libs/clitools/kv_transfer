#!/bin/bash


DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
DATADIR=$DIR/data


hasNode=$(qc status -silent)
if [ $? -ne 0 ]; then
    echo "Error Connecting to QredoChain Node"
	exit 1
fi


#set -e

dump (){
	if [ $d_flag = 'true' ]; then
		echo "debug $debug"
		echo $2
		echo -e "\033[40;31;5;82m $1  \033[0m"	
		res=$(echo $1 | sed 's/"/\\"/g')
		echo -e "\033[40;38;5;82m $res  \033[0m"
	fi
}

newKVID=$1

#----------------------------------------------------------------------------------------------------------------------------------------

PrepKVUpdate() {
	echo Prepare Updated Wallet serialized TX for Signing 

	updateJson='{
		"existingWalletAssetID":"'$newKVID'",
		"newowner":"'$p1_assetid'",
		"transferType":1,
		"kv":[
			{"key":"key1","value":"newvalue3"},
			{"key":"key2","value":"newvalue2"},
			{"key":"key3","value":"newvalue1"}
		],
		"transfer":[{
			"transferType":1,
			"expression":"t5 + t6 + t7 > 1 & p2",
			"description":"some description goes here",
			"participants":[
				{"name":"p2","ID":"'$p2_assetid'"},
				{"name":"t5","ID":"'$t5_assetid'"},
				{"name":"t6","ID":"'$t6_assetid'"},
				{"name":"t7","ID":"'$t7_assetid'"}
				] }]
		}'

	dump "$updateJson" "PrepKVUpdate"

	updateJson=$(echo $updateJson | sed 's/\n//g')
	updateKV=$(qc pkvu -j="$updateJson")
	serializedUnsignedAsset=$(echo $updateKV | jq -r .serializedUpdate)
}
#----------------------------------------------------------------------------------------------------------------------------------------

SignForEachIDoc() {
	echo "Sign for each IDDoc"

	#sign for each IDDoc
	json='{"seed":"'$p2_seed'","msg":"'$serializedUnsignedAsset'"}'
	sigP2=$(qc sign -j="$json" | jq -r .signature)
	json='{"seed":"'$t5_seed'",	"msg":"'$serializedUnsignedAsset'"}'
	sigT5=$(qc sign -j="$json" | jq -r .signature)
	json='{	"seed":"'$t6_seed'",	"msg":"'$serializedUnsignedAsset'"}'
	sigT6=$(qc sign -j="$json" | jq -r .signature)
	json='{	"seed":"'$t7_seed'",	"msg":"'$serializedUnsignedAsset'"}'
	sigT7=$(qc sign -j="$json" | jq -r .signature)
}



#----------------------------------------------------------------------------------------------------------------------------------------

SendKV() {
	echo SendKVUpdate - Aggreate Sign, Verify and optionally broadcast
	json='{"sigs":[
				{"id":"'$p2_assetid'","abbreviation":"p2","signature":"'$sigP2'"},
				{"id":"'$t5_assetid'","abbreviation":"t5","signature":"'$sigT5'"},
				{"id":"'$t6_assetid'","abbreviation":"t6","signature":"'$sigT6'"},
				{"id":"'$t7_assetid'","abbreviation":"t7","signature":"'$sigT7'"}
				],
			"kvUpdatePayload":'$updateJson'
		}'
	dump "$json" "Aggregate Sign"
	updateComplete=$(qc skv -b=true -j="$json")
}

#----------------------------------------------------------------------------------------------------------------------------------------


d_flag='false'

while getopts 'd' flag; do
  case "${flag}" in
    d) d_flag='true' ;;
   esac
done

d_flag='true'
echo Build Binary
build


debug=false

if [ -x "$(command -v tabset)" ]; then
    tabset happy
fi

#----------------------------------------------------------------------------------------------------------------------------------------


source $DATADIR/assets
PrepKVUpdate
SignForEachIDoc
SendKV





    
